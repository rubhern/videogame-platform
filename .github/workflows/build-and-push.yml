name: ci

on:
  push:
    branches: [main]
    paths: ['services/**']
  pull_request: {branches: [main]}

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  build:
    runs-on: [self-hosted, linux, x64]
    strategy:
      matrix:
        service: [game-service]

    steps:
      - uses: actions/checkout@v4

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - uses: actions/setup-java@v4
        with: {distribution: temurin, java-version: 21}

      - run: mvn -f services/${{ matrix.service }}/pom.xml --batch-mode verify

      - uses: docker/setup-buildx-action@v3.10.0
        with: {version: latest}

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        with:
          projectBaseDir: services/${{ matrix.service }}
          args: >
            -Dsonar.projectKey=videogame-platform-${{ matrix.service }}
        env:
          SONAR_SCANNER_OPTS: -Dnetworkaddress.cache.ttl=0
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build & push image
        id: buildx
        uses: docker/build-push-action@v6
        with:
          context: services/${{ matrix.service }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: v2.5.0

      - name: Sign image (keyless)
        run: |
          cosign sign --yes $IMAGE_REF
        env:
          COSIGN_EXPERIMENTAL: "true"
          IMAGE_REF: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}@${{ steps.buildx.outputs.digest }}

      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
          severity: CRITICAL,HIGH
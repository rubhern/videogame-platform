{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfae Videogame Platform","text":"<p>A cloud-native web app where gamers can discover, rate, review and curate lists of video games.</p> Goal Metric Time-to-First-Result &lt; 200 ms P95 Monthly Active Users 50 000 (MVP) Uptime 99.9 %"},{"location":"#core-features","title":"Core Features","text":"<ol> <li>Browse games catalogue</li> <li>Faceted search &amp; filters</li> <li>Ratings \u2605\u2606\u2606\u2606\u2606 and Rotten-Tomato-style critic reviews</li> <li>Personal lists &amp; collections</li> <li>Single-Sign-On with popular identity providers</li> </ol>"},{"location":"arch/decisions/arch-decisions/","title":"\ud83d\udcdd Architecture Decisions","text":"Area Decision Rationale Overall style C4-model micro-service architecture Clear separation of concerns; scales organisationally (independent teams) and technically (independent deployables). Runtime platform Kubernetes (managed) Rolling updates, self-healing, built-in service discovery and HPA suit game-traffic spikes. API ingress Kong Ingress / NGINX + Edge CDN Centralised auth, rate-limiting and coarse caching at the edge reduce P99 latency worldwide. AuthN / AuthZ Keycloak with OIDC Open-source, supports social log-ins; avoids bespoke auth code in every service. Service framework Spring Boot (Java 21) Mature ecosystem, first-class observability hooks, developers already fluent. Inter-service sync REST / JSON via Gateway Simpler than gRPC for external integration; benefits from Kong plugins (caching, tracing). Async messaging Apache Kafka High-throughput fan-out (ratings-created, reviews-created); guarantees ordering for leaderboards. Databases PostgreSQL (users, games, ratings), MongoDB (reviews), Redis (cache) Relational consistency for core entities; flexible schema + text search for reviews; in-memory latency for hot game data. External data IGDB API pulled by Launch Svc Avoids replicating a large third-party dataset; keeps catalogue fresh daily. Observability Prometheus + Grafana (metrics), ELK (logs), Jaeger (traces) OSS stack with vibrant community; no vendor lock-in; supports RED/SLO dashboards. CI / CD GitHub Actions \u2192 Docker \u2192 Helm Charts Full pipeline as-code; Helm simplifies multi-env overrides. Infrastructure as Code Terraform modules for cluster, DBs, VPC Audit-ready provisioning, reproducible environments. Secrets Kubernetes Secrets sealed by SOPS Encrypt-at-rest in Git, decrypt only at deploy time."},{"location":"arch/decisions/arch-decisions/#trade-offs-alternatives-considered","title":"Trade-offs &amp; Alternatives considered","text":"<ul> <li>Monolith vs micro-services \u2013 a monolith would simplify deployments but hinder parallel feature work and elastic scaling of hot spots (e.g. ratings).</li> <li>gRPC vs REST \u2013 gRPC brings smaller payloads but HTTP/JSON is still easier for web clients and external partners.</li> <li>Managed DB vs self-hosted \u2013 managed Postgres wins on operational burden; MongoDB + Redis stay self-hosted for cost.</li> <li>Hosted APM suites \u2013 Datadog / New Relic provide out-of-the-box dashboards but incur steep licensing; OSS stack chosen for cost neutrality.</li> </ul> <p>The team will revisit these decisions quarterly; any change will be captured here as ADR-nnn.</p>"},{"location":"arch/decisions/arch-decisions/#adr-nnn-template","title":"ADR nnn \u2013 template","text":"<p>Date: 2025-04-29</p>"},{"location":"arch/decisions/arch-decisions/#status","title":"Status","text":"<ul> <li>Proposed</li> </ul>"},{"location":"arch/decisions/arch-decisions/#context","title":"Context","text":"<ul> <li>Describe the context of the decision.</li> </ul>"},{"location":"arch/decisions/arch-decisions/#decision","title":"Decision","text":"<ul> <li>Describe the decision.</li> </ul>"},{"location":"arch/decisions/arch-decisions/#consequences","title":"Consequences","text":"<ul> <li>Describe the consequences of the decision.</li> </ul>"},{"location":"arch/diagrams/c4/container-diagram/","title":"\ud83d\udce6 Container Diagram","text":""},{"location":"arch/diagrams/c4/container-diagram/#mermaid-c4-container-diagram","title":"MERMAID C4 Container Diagram","text":"<pre><code>C4Container\ntitle Video-Game Platform \u2013 Container View\n\n    Person(webUser, \"User (Web)\")\n    Person(mobileUser, \"User (Mobile)\")\n\n    System_Boundary(videoGamePlatform, \"Video-Game Platform\") {\n\n        Container(cdn,     \"Edge CDN\",   \"CloudFront / Azure CDN\", \"Static + cached API\")\n        Container(apiGw,   \"API Gateway\",\"NGINX / Kong\",          \"Routing / throttling\")\n        Container(keycloak,\"Keycloak\",   \"OIDC\",                  \"Identity &amp; Access\")\n\n        Container_Boundary(svcs, \"Micro-services\") {\n            Container(userSvc,   \"User Svc\",   \"Spring Boot\", \"User profiles, auth\")\n            Container(gameSvc,   \"Game Svc\",   \"Spring Boot\", \"Game catalogue, inventory\")\n            Container(ratingSvc, \"Rating Svc\", \"Spring Boot\", \"Ratings (1-10\u2605)\")\n            Container(reviewSvc, \"Review Svc\", \"Spring Boot\", \"Text reviews\")\n            Container(launchSvc, \"Launch Svc\", \"Spring Boot\", \"Promotion launches, IGDB sync\")\n        }\n        Container(allSvcs, \"All Micro-services\", \"Logical\")\n\n        ContainerDb(pgUsers,   \"users_db\",    \"PostgreSQL\")\n        ContainerDb(pgGames,   \"games_db\",    \"PostgreSQL\")\n        ContainerDb(pgRatings, \"ratings_db\",  \"PostgreSQL\")\n        ContainerDb(mongoRev,  \"reviews_db\",  \"MongoDB\")\n        ContainerDb(redis,     \"Redis cache\", \"Redis\")\n        ContainerDb(kafka,     \"Kafka bus\",   \"Kafka\")\n\n        Container_Ext(igdb, \"IGDB API\", \"REST\", \"Third-party\")\n\n        Rel(webUser,    cdn,      \"HTTPS\")\n        Rel(mobileUser, cdn,      \"HTTPS\")\n        Rel(cdn,        apiGw,    \"HTTPS / REST\")\n        Rel(apiGw,      keycloak, \"Token introspection\")\n        Rel(apiGw, allSvcs, \"REST / JSON\")\n        Rel_D(userSvc,   pgUsers,   \"JDBC\")\n        Rel_D(gameSvc,   pgGames,   \"JDBC\")\n        Rel_D(ratingSvc, pgRatings, \"JDBC\")\n        Rel_D(reviewSvc, mongoRev,  \"MongoDB\")\n        Rel(gameSvc,   redis,     \"cache\")\n        Rel_L(ratingSvc, kafka,   \"rating-created\")\n        Rel_L(reviewSvc, kafka,   \"review-created\")\n        Rel_R(launchSvc, igdb,    \"pulls\")\n    }\n</code></pre>"},{"location":"arch/diagrams/c4/container-diagram/#plantuml-c4-container-diagram","title":"PLANTUML C4 Container Diagram","text":"<pre>4b632a903bb92b2d7adeadb45170d44664f9b5d44aba0dd568f35a091f823c1e946135eeda645d4346b8c83c2f9b4ca8b6e649bffeede9da01d6e13e372d28b4</pre>"},{"location":"arch/diagrams/c4/context-diagram/","title":"\ud83d\udd17 Context Diagram","text":""},{"location":"arch/diagrams/c4/context-diagram/#mermaid-diagram","title":"MERMAID DIAGRAM","text":"<pre><code>C4Context\ntitle Video-Game Platform \u2013 System Context\n\n    Person(webUser, \"User (Web)\", \"Navigates from browser\")\n    Person(mobileUser, \"User (Mobile)\", \"Navigates from smartphone / tablet\")\n    System_Boundary(videoGamePlatform, \"Video-Game Platform\") {\n        Container(apiGw,       \"API Gateway\",        \"NGINX / Kong\",        \"Routes and rate-limits calls\")\n        Container(keycloak,    \"Identity Provider\",  \"Keycloak\",            \"Auth / token introspection\")\n        Container_Ext(igdb,    \"IGDB API\",           \"REST\",                \"Third-party game metadata\")\n        Boundary(appLayer, \"Application Services\") {\n            Container(allSvcs, \"All Micro-services\", \"Logical\")\n        }\n    }\n\n    Rel(webUser,  apiGw,  \"HTTPS\")\n    Rel(mobileUser, apiGw, \"HTTPS\")\n    Rel(apiGw, keycloak, \"JWT introspection\")\n    Rel(apiGw, allSvcs,  \"REST\")\n    Rel_R(allSvcs, igdb,  \"pulls\", \"HTTPS\")\n</code></pre>"},{"location":"arch/diagrams/c4/context-diagram/#plantuml-diagram","title":"PLANTUML DIAGRAM","text":"<pre>f7b77074292d84ceb7bae3e41b55ccc043a9c0abc0fffb460d95aaddcbf28087997d607bf34fd13ea2ac112f8ec66aae44e97032c5a0cd4e9960f86c5682ec9d</pre>"},{"location":"arch/diagrams/c4/deployment-diagram/","title":"\ud83d\udda5\ufe0f Infrastructure","text":""},{"location":"arch/diagrams/c4/deployment-diagram/#mermaid-c4-deployment-diagram","title":"MERMAID C4 Deployment Diagram","text":"<pre><code>C4Deployment\ntitle Video-Game Platform \u2013 Infrastructure View\n\nNode(client, \"Client Side\") {\n    Container(browser,  \"Web / Mobile Browser\",  \"Mozilla, Chrome, Edge\")\n}\n\nNode(edge, \"Edge Tier\") {\n    Container(cdn,  \"Edge CDN\",  \"Varnish / CloudFront\")\n}\n\nNode(cluster, \"Kubernetes Cluster\") {\n    Container(apiGw,   \"API Gateway\", \"Kong Ingress\")\n    Container(keycloak,\"Keycloak\",    \"OIDC\")\n    Container(svcs,    \"Micro-services (5\u00d7)\", \"Spring Boot Pods, HPA\")\n    Container(kafka,   \"Kafka\",       \"StatefulSet 3\u00d7\")\n    Container(redis,   \"Redis\",       \"StatefulSet\")\n    Container(pg,      \"PostgreSQL\",  \"StatefulSet 3\u00d7\")\n    Container(mongo,   \"MongoDB\",     \"StatefulSet 3\u00d7\")\n}\n\nNode(observ, \"Observability Stack\") {\n    Container(prom, \"Prometheus\", \"Helm Chart\")\n    Container(graf, \"Grafana\",    \"Deployment\")\n    Container(elk,  \"ELK Stack\",  \"Elastic Cloud / ECK\")\n}\n\nRel(browser, cdn,  \"HTTPS\")\nRel(cdn,     apiGw,\"HTTPS\")\nRel(apiGw,   svcs, \"REST\")\nRel(svcs,    kafka,\"Kafka protocol\")\nRel(svcs,    pg,   \"JDBC\")\nRel(svcs,    mongo,\"Driver\")\nRel(svcs,    redis,\"Cache\")\nRel(svcs,    prom, \"Scraped metrics\")\nRel(svcs,    elk,  \"Filebeat logs\")\nRel_R(svcs,  keycloak,\"JWT introspection\")\nRel_L(apiGw, keycloak,\"JWT introspection\")\nRel_D(prom,  graf, \"Dashboards\")\nRel_D(elk,   graf, \"Loki datasource\")\n</code></pre>"},{"location":"arch/diagrams/c4/deployment-diagram/#plantuml-c4-deployment-diagram","title":"PLANTUML C4 Deployment Diagram","text":"<pre>330a1ac725150db0e683311ebd5cfd7c5eaf4301aaba8c0d1435ff3a9d3a4a0ddce089312adf53ceed7b96b4479f398f22925dbea972acc6b0984e981ddebb83</pre>"},{"location":"arch/diagrams/datamodel/erd/","title":"\ud83d\uddfa\ufe0f Entity-Relationship Diagram (ERD)","text":"<pre><code>erDiagram\n    USERS {\n        UUID  id PK\n        string email  \"unique\"\n        string display_name\n        datetime created_at\n    }\n\n    GAMES {\n        UUID  id PK\n        string title\n        string slug  \"unique\"\n        date   release_date\n        string platform\n        string genre\n        text   description\n        decimal average_rating\n    }\n\n    RATINGS {\n        UUID     id PK\n        UUID     user_id  FK\n        UUID     game_id  FK\n        tinyint  score  \"1-10\"\n        datetime created_at\n        datetime updated_at\n    }\n\n    REVIEWS {\n        UUID     id PK\n        UUID     user_id  FK\n        UUID     game_id  FK\n        text     body\n        smallint score  \"1-10\"\n        datetime created_at\n        datetime updated_at\n    }\n\n    LAUNCH {\n        UUID   id PK\n        UUID   game_id FK\n        date   launch_date\n        datetime fetched_at  \"when pulled from IGDB\"\n    }\n\n    USERS  ||--o{ RATINGS  : \"rates\"\n    USERS  ||--o{ REVIEWS  : \"writes\"\n    GAMES  ||--o{ RATINGS  : \"has\"\n    GAMES  ||--o{ REVIEWS  : \"has\"\n    GAMES  ||--o{ LAUNCH : \"appears in\"\n</code></pre>"},{"location":"arch/diagrams/observability/obs-diagram/","title":"\ud83d\udd0e Observability","text":""},{"location":"arch/diagrams/observability/obs-diagram/#mermaid-diagram","title":"MERMAID DIAGRAM","text":"<pre><code>%%{init:{\n  \"theme\":\"base\",\n  \"themeVariables\":{\"fontSize\":\"18px\"},\n  \"flowchart\":{\"rankSpacing\":60,\"nodeSpacing\":50}\n}}%%\nflowchart TD\n    subgraph \"Application Pods\"\n        direction TB\n        svc1[\"User Svc\"]:::svc\n        svc2[\"Game Svc\"]:::svc\n        svc3[\"Rating Svc\"]:::svc\n        svc4[\"Review Svc\"]:::svc\n        svc5[\"Launch Svc\"]:::svc\n    end\n\n    subgraph \"Metrics Pipeline\"\n        prom[(\"Prometheus&lt;br/&gt;scrape\")]:::metric\n        graf[(\"Grafana&lt;br/&gt;dashboards\")]:::ui\n    end\n\n    subgraph \"Logs Pipeline\"\n        filebeat[(\"Filebeat&lt;br/&gt;Side-car\")]:::log\n        elk[(\"ELK Stack&lt;br/&gt;(ES + Kibana)\")]:::log\n    end\n\n    subgraph \"Tracing Pipeline\"\n        otel[(\"OpenTelemetry&amp;nbsp;Collector\")]:::trace\n        jaeger[(\"Jaeger UI\")]:::ui\n    end\n\n    classDef svc    fill:#0d6efd,color:#fff,stroke:#003d9c;\n    classDef metric fill:#198754,color:#fff;\n    classDef log    fill:#6c757d,color:#fff;\n    classDef ui     fill:#6610f2,color:#fff;\n    classDef trace  fill:#d63384,color:#fff;\n\n    %% flows\n    svc1 --&gt;|scrape /metrics| prom\n    svc2 --&gt; prom\n    svc3 --&gt; prom\n    svc4 --&gt; prom\n    svc5 --&gt; prom\n\n    svc1 -- Filebeat --&gt; filebeat\n    svc2 -- Filebeat --&gt; filebeat\n    svc3 -- Filebeat --&gt; filebeat\n    svc4 -- Filebeat --&gt; filebeat\n    svc5 -- Filebeat --&gt; filebeat\n    filebeat --&gt; elk\n\n    svc1 -- OTLP --&gt; otel\n    svc2 --&gt; otel\n    svc3 --&gt; otel\n    svc4 --&gt; otel\n    svc5 --&gt; otel\n    otel --&gt; jaeger\n\n    prom --&gt; graf\n    elk  --&gt; graf\n    jaeger --&gt; graf\n</code></pre>"},{"location":"arch/diagrams/observability/obs-diagram/#plantuml-diagram","title":"PLANTUML DIAGRAM","text":"<pre>6693075b1c510a2747c5d68ba954aa44c6b3f145eb911d6ab3656311e46c6bb1e839750555917a4adcd2c7da89d80efc619ab259f609965427fd2a6a571d634d</pre>"},{"location":"arch/diagrams/software/software-diagram/","title":"\ud83d\udd00 Software Flowchart","text":""},{"location":"arch/diagrams/software/software-diagram/#mermaid-diagram","title":"MERMAID DIAGRAM","text":"<pre><code>flowchart TD\n    %% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 PRESENTATION \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph PL[\"Presentation Layer\"]\n        direction TB\n        WebApp[\"\ud83d\udcbb Web App\"]\n        MobileApp[\"\ud83d\udcf1 Mobile App\"]\n    end\n    %% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 EDGE/API \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph EA[\"Edge &amp; API Layer\"]\n        direction TB\n        CDN[(\"\ud83c\udf10 CDN\")]\n        API[\"\ud83d\udeaa API Gateway\"]\n        Auth[\"\ud83d\udd10 Keycloak\"]\n        API --&gt;|\"token introspection\"| Auth\n    end\n\n    %% \u2500\u2500\u2500\u2500\u2500\u2500 APPLICATION \u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph AL[\"Application Layer\"]\n        direction BT\n        UserSvc[\"\ud83d\udc64 User Svc\"]\n        GameSvc[\"\ud83c\udfae Game Svc\"]\n        RatingSvc[\"\u2b50 Rating Svc\"]\n        ReviewSvc[\"\ud83d\udcdd Review Svc\"]\n        LaunchSvc[\"\ud83d\ude80 Launch Svc\"]\n    end\n\n    %% \u2500\u2500\u2500\u2500\u2500\u2500\u2500 MESSAGING \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph MB[\"Messaging Bus\"]\n        Kafka[(\"\ud83e\ude82 Kafka\")]\n    end\n\n    %% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 DATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph DL[\"Data Layer\"]\n        direction TB\n        PgUsers[(\"\ud83d\udc18 users_db\")]\n        PgGames[(\"\ud83d\udc18 games_db\")]\n        PgRatings[(\"\ud83d\udc18 ratings_db\")]\n        Redis[(\"\u26a1 Redis\")]\n        Mongo[(\"\ud83c\udf43 MongoDB&lt;br/&gt;reviews_db\")]\n    end\n\n    %% \u2500\u2500\u2500\u2500\u2500 OBSERVABILITY \u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph OBS[\"Observability / Platform\"]\n        Prom[(\"\ud83d\udcc8 Prometheus\")]\n        Graf[(\"\ud83d\udcca Grafana\")]\n        ELK[(\"\ud83d\udcda ELK\")]\n    end\n\n    IGDB([\"\ud83c\udfaf IGDB API\"])\n\n    %% communications (unchanged, condensed)\n    WebApp --&gt;|HTTPS| CDN\n    MobileApp --&gt;|HTTPS| CDN\n    CDN --&gt;|HTTPS| API\n    API --&gt;|REST| UserSvc &amp; GameSvc &amp; RatingSvc &amp; ReviewSvc &amp; LaunchSvc\n    UserSvc  --&gt; PgUsers\n    GameSvc  --&gt; PgGames\n    RatingSvc--&gt; PgRatings\n    ReviewSvc--&gt; Mongo\n    LaunchSvc--&gt; PgGames\n    GameSvc  &lt;--&gt;|cache| Redis\n    RatingSvc --&gt;|rating-created| Kafka\n    ReviewSvc --&gt;|review-created| Kafka\n    Kafka --&gt; GameSvc\n    LaunchSvc --&gt;|pull| IGDB\n    classDef layer fill:#f7f7f7,stroke:#ccc,stroke-width:1px\n    class PL,EA,AL,MB,DL,OBS layer\n</code></pre>"},{"location":"arch/diagrams/software/software-diagram/#plantuml-diagram","title":"PLANTUML DIAGRAM","text":"<pre>0689b5ce982f7f486cd0179882000789bc95bc18e9851a27e6762d4e6f8caef07e98c7551e16cfdb4e1034298d5e443852cd33558c716a668d36e0f3d5300058</pre>"},{"location":"arch/tech/stack/","title":"\u2699\ufe0f Tech Stack","text":""},{"location":"arch/tech/stack/#technology-stack-mvp-all-free-edition","title":"\ud83d\udee0\ufe0f Technology Stack \u2013 MVP (All-Free Edition)","text":"Layer / Concern Technology Rationale Front-end React 18 + Vite + TypeScript MIT licences; instant HMR, modern bundling. Design system Tailwind CSS + Headless UI Utility CSS + accessible headless components. Mobile / PWA Google Workbox Apache-2.0; generates service-worker for offline catalogue. API Gateway / Ingress Kong OSS (IngressClass) Free/Apache-2.0; OIDC, rate-limit, gRPC, WebSocket. Back-end micro-services Spring Boot 3 (Java 21) Apache-2.0; mature ecosystem, AOT native option. Sync API contracts OpenAPI 3.1 + springdoc Generate docs + TS client; both Apache-2.0. Async messaging / event log \u2605 Apache Kafka + Strimzi (K8s operator) Completely free to self-host; Strimzi automates rolling upgrades. Databases Catalogue: PostgreSQL 16Reviews: MongoDB 6Ratings: PostgreSQL table \u201cuser_ratings\u201dSearch: OpenSearch 2Cache*: Redis 7 All OSS licences (Postgres LGPL, MongoDB SSPL, OpenSearch Apache-2.0, Redis BSD). Using Postgres for ratings avoids pay-per-request DynamoDB. Identity &amp; SSO Keycloak 23 (OIDC) Apache-2.0; social logins, RBAC, tokens. AuthZ policy Open Policy Agent (OPA) sidecar Apache-2.0; decoupled fine-grained authZ. Container build Paketo Buildpacks Apache-2.0; reproducible CVE-scanned images. Orchestrator \u2605 k3s (lightweight CNCF Kubernetes dist.) Fully OSS, single-binary; runs on any VM or bare-metal. Service Mesh Istio 1.22 Apache-2.0; mTLS, retries, canary traffic shifting. CI / CD GitHub Actions \u2013 free minutes for public repos (CI) \u2192 Argo CD (GitOps) Public repos have unlimited free minutes; Argo CD is Apache-2.0. Observability OpenTelemetry \u2192 Prometheus / Grafana / Loki / Tempo CNCF stack; all OSS. Security tooling Trivy \u2022 OWASP ZAP \u2022 Renovate All MIT / Apache-2.0; shift-left scans &amp; dep updates. Static docs site MkDocs Material (GitHub Pages) MIT licence; GitHub Pages free for public projects. Infrastructure-as-Code Terraform 1.8 + Helmfile MPL-2.0 / Apache-2.0; declarative infra &amp; charts."},{"location":"archetypes/rest-postgre-archetype/","title":"\u26f5\ufe0f rest\u2011postgre\u2011archetype","text":"<p>A Maven archetype that spins up a production\u2011ready Spring Boot REST API backed by PostgreSQL, following Hexagonal Architecture &amp; CQRS. Generate fully wired services in seconds with consistent code style, Docker assets, Integration and Acceptance tests and OpenAPI contracts.</p>"},{"location":"archetypes/rest-postgre-archetype/#1-what-is-a-maven-archetype","title":"1 What is a Maven archetype?","text":"<p>A Maven archetype is a project template. It packages:</p> <ul> <li>a directory structure</li> <li>source files with <code>${placeholders}</code></li> <li>a descriptor (<code>archetype-metadata.xml</code>) that tells Maven how to replace those placeholders when you generate a new project.</li> </ul> <p>Think of it as <code>spring\u2011init</code> on steroids and totally customisable for your organisation.</p>"},{"location":"archetypes/rest-postgre-archetype/#2-what-does-restpostgrearchetype-give-you","title":"2 What does rest\u2011postgre\u2011archetype give you?","text":"<ul> <li>Spring Boot 3.4.x starter with MapStruct, SpringDoc.</li> <li>PostgreSQL datasource (H2 in tests).</li> <li>Dockerfile and docker\u2011compose.yml for local / CI runs.</li> <li>Hexagonal folder layout (<code>domain/</code>, <code>application/</code>, <code>infrastructure/</code>).</li> <li>Pre\u2011wired OpenAPI spec &amp; generated interfaces.</li> <li>Opinionated logging, health checks and metrics.</li> </ul>"},{"location":"archetypes/rest-postgre-archetype/#3-installing-the-archetype","title":"3 Installing the archetype","text":"<pre><code># inside the mono\u2011repo root\ncd rest-postgre-archetype\nmvn clean install         # puts the archetype jar in your ~/.m2 repository\nmvn archetype:update-local-catalog\n</code></pre>"},{"location":"archetypes/rest-postgre-archetype/#4-generating-a-new-service-from-the-archetype","title":"4 Generating a new service from the archetype","text":"<pre><code>mvn archetype:generate \\\n  -DarchetypeGroupId=com.acme \\\n  -DarchetypeArtifactId=rest-postgre-archetype \\\n  -DarchetypeVersion=1.0.0 \\\n  -DarchetypeCatalog=local\n</code></pre> <p>Maven will prompt for each property (see table below). Everything is interactive unless you pass -Dproperty=value on the CLI.</p>"},{"location":"archetypes/rest-postgre-archetype/#5-archetype-variables-archetype-metadataxml","title":"5 Archetype variables (archetype-metadata.xml)","text":"Placeholder Meaning entity Business aggregate root; used for class names (GameService, GameRepository) and OpenAPI tags. Make sure to write capitalized uncapitalizedEntity Same as entity but uncapitalized serverPort Port Spring Boot listens on (and is published in docker-compose.yml) dbName PostgreSQL database name for dev/test. dbUser DB username injected in application.yaml &amp; compose file. dbPassword DB password (change it!). <p>All of them live under  in archetype-metadata.xml and are marked as filtered in the descriptor, so they propagate to .java, .yaml, .md, Docker assets, etc."},{"location":"archetypes/rest-postgre-archetype/#6-example-noninteractive-generation","title":"6 Example: non\u2011interactive generation","text":"<pre><code>mvn archetype:generate \\\n  -DarchetypeGroupId=com.acme \\\n  -DarchetypeArtifactId=rest-postgre-archetype \\\n  -DarchetypeVersion=1.0.0 \\\n  -DarchetypeCatalog=local \\\n  -DgroupId=com.acme.games \\\n  -DartifactId=game-service \\\n  -Dversion=1.0.0-SNAPSHOT \\\n  -Dpackage=com.acme.games \\\n  -Dentity=Game \\\n  -DserverPort=8082 \\\n  -DdbName=gamesdb \\\n  -DdbUser=gameuser \\\n  -DdbPassword=changeit \\\n  -B\n</code></pre> <p>The -B flag is batch mode\u2014ideal for CI/CD pipelines.</p>"},{"location":"requirements/functional/","title":"\ud83d\udcdd MVP Functional Requirements \u2013 Videogame Platform","text":"<p>Scope: minimal set needed to go live and validate product/market fit.</p> ID User Story Acceptance Criteria Priority AUTH-001 As a guest user I want to register with email/password or Google OAuth so that I can create an account \u2013 Registration form validates email format &amp; password strength. \u2013 Confirmation email with one-click link. \u2013 Reject duplicate emails. \u2013 Stores password hashed (argon2). Must AUTH-002 As a registered user I want to log in so that I can access personalised features \u2013 OIDC session cookie issued. \u2013 3 failed attempts \u2192 captcha. \u2013 \u201cRemember me\u201d 30-day token. Must RATE-001 As a logged-in gamer I want to rate a videogame 1-10 stars so that my opinion is counted \u2013 Hover + click UI updates instantly (optimistic). \u2013 Only one rating per user per game; update allowed. \u2013 Average rating recalculated in \u2264200 ms. Must SRCH-001 As a visitor I want to search for a videogame by title, genre, platform or release year \u2013 Search bar auto-suggests top 5 titles. \u2013 Results paginated 20 per page. \u2013 Response time &lt; 150 ms P95 under 500 RPS. Must REV-001 As a logged-in gamer I want to write a textual review for a game so others can read it \u2013 Rich-text editor (markdown). \u2013 Length 50-2000 chars. \u2013 Profanity filter rejects offensive words. \u2013 Each user can edit/delete their own review. Should HOME-001 As a visitor I want a home page that showcases new videogame launches so I can discover recent titles \u2013 Carousel of latest 10 releases (sorted by launch_date desc). \u2013 \u201cView all\u201d link leads to <code>/new-releases</code> list. \u2013 Launch data pulled from external API (e.g., IGDB) every 6 h. Must"},{"location":"requirements/non-functional/","title":"\u2699\ufe0f Non-Functional","text":""},{"location":"requirements/non-functional/#non-functional-mvp-level","title":"Non-Functional (MVP-level)","text":"<ul> <li>Performance: API P99 &lt; 300 ms, homepage P95 FCP &lt; 2 s on 3G.</li> <li>Security: OWASP Top-10 mitigations, HTTPS-only, CSP headers.</li> <li>Compliance: GDPR \u2013 deletion &amp; export endpoints in backlog.</li> <li>Availability: 99.5 % monthly SLO for public endpoints.</li> <li>Observability: trace &gt; 90 % sampled in staging, 10 % in prod; custom metrics for rating submissions &amp; searches.</li> </ul>"},{"location":"requirements/non-functional/#non-functional-requirements-detailed-explanation","title":"\ud83d\udd12\ud83d\udcc8 Non-Functional Requirements \u2013 Detailed Explanation","text":"NFR What the target means in practice Why it matters for a videogame catalogue How we\u2019ll measure &amp; enforce it Performance\u2022 API P99 &lt; 300 ms\u2022 Homepage FCP &lt; 2 s on 3 G API P99 \u21d2 99 % of backend requests (GET /search, POST /rating \u2026) must finish &lt; 300 ms inside the pod, CDN latency excluded.FCP (First Contentful Paint) is a Core Web Vital; the first text/image on <code>/</code> must appear within 2 s on a 1.6 Mbps (Fast 3 G) simulation. Discovery must feel instant. Slow pages drop engagement; every +100 ms can cut conversions. \u2022 k6/Gatling load test in CI.\u2022 Prometheus histogram <code>http_request_duration_seconds{quantile=\"0.99\"}</code>.\u2022 Lighthouse-CI budget fails if FCP &gt; 2 s. Security\u2022 OWASP Top-10 mitigations\u2022 HTTPS-only\u2022 CSP headers Protect against injection, XSS, broken auth, etc. All traffic via TLS 1.3 with HSTS. <code>Content-Security-Policy</code> blocks inline scripts &amp; mixed content. Ratings/reviews are user-generated; an XSS could deface pages or steal tokens. HTTPS secures logins on public Wi-Fi. \u2022 Nightly OWASP ZAP scan; high-sev findings block release.\u2022 ALB forces 443; port 80 \u2192 301.\u2022 Helmet middleware sets CSP, X-Frame-Options; Snyk/Dependabot keep deps patched. Compliance\u2022 GDPR Right-to-Be-Forgotten &amp; export endpoints (backlog) Data model &amp; APIs must let us delete all personal data (ratings, reviews, tokens) or export it (JSON/CSV). Self-service UI can wait, but backend hooks must exist. EU users may sign up day 1; retrofitting GDPR later is expensive and risky. \u2022 Unit tests assert <code>DELETE /user/{id}</code> cascades.\u2022 Tables/indices tag columns with <code>pii=true</code> for future automation. Availability\u2022 99 .5 % SLO / month \u2264 3 h 40 m total downtime per month, including planned maint in business hours. Multi-AZ but not multi-region. MVP tolerates short night outages but must be \u201cup most of the time\u201d to collect feedback. \u2022 Uptime ping \u2192 Grafana SLO dashboard.\u2022 Post-mortem if error-budget burn &gt; 50 %. Observability\u2022 \u2265 90 % traces sampled in staging, 10 % in prod\u2022 Business metrics for ratings &amp; searches Tracing: every request in staging; 10 % in prod to manage cost.Metrics: <code>ratings.count</code>, <code>reviews.count</code>, <code>search.latency</code>, <code>rating.avg</code>. Debugging distributed flows + measuring feature uptake (e.g., Twitch promo spike) requires traces &amp; dashboards. \u2022 OpenTelemetry SDK \u2192 Jaeger (staging) / Tempo (prod).\u2022 Loki logs correlated by <code>trace_id</code>.\u2022 Prometheus alerts on metric anomalies."},{"location":"requirements/non-functional/#architectural-implications","title":"Architectural implications","text":"<ul> <li>Performance \u2192 CDN, Redis edge cache, Brotli, async DB writes.</li> <li>Security \u2192 OAuth/OIDC provider, mTLS in service mesh, Trivy scans in CI.</li> <li>Availability \u2192 stateless pods across 3 AZs, RDS Multi-AZ or DynamoDB global tables.</li> <li>Observability \u2192 OTel starter wired into every Spring Boot service from Sprint 0.</li> <li>Compliance \u2192 All tables include <code>user_id</code>; prefer soft-delete + TTL for cheap RTBF.</li> </ul> <p>Embedding these NFRs from the start keeps the MVP small and production-ready, avoiding costly rewrites later.</p>"}]}
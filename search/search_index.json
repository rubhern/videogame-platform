{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfae Videogame Platform","text":"<p>A cloud-native web app where gamers can discover, rate, review and curate lists of video games.</p> Goal Metric Time-to-First-Result &lt; 200 ms P95 Monthly Active Users 50 000 (MVP) Uptime 99.9 %"},{"location":"#core-features","title":"Core Features","text":"<ol> <li>Browse games catalogue</li> <li>Faceted search &amp; filters</li> <li>Ratings \u2605\u2606\u2606\u2606\u2606 and Rotten-Tomato-style critic reviews</li> <li>Personal lists &amp; collections</li> <li>Single-Sign-On with popular identity providers</li> </ol>"},{"location":"arch/decisions/arch-decisions/","title":"\ud83d\udcdd Architecture Decisions","text":"Area Decision Rationale Overall style C4\u2011model micro\u2011service architecture Clear separation of concerns; scales organisationally (independent teams) and technically (independent deployables). Runtime platform MicroK8s on Windows 11 WSL 2 Lightweight single\u2011node Kubernetes ideal for a local training environment; avoids cloud fees while remaining upstream compatible. API ingress Kong Ingress Controller Unified gateway with auth, rate\u2011limiting and plugins. An Edge CDN will be evaluated post\u2011MVP for global caching. URL scheme (MVP) HTTP only Eliminates TLS complexity during early development; HTTPS will be enforced before public release. AuthN / AuthZ Keycloak with OIDC Open\u2011source, supports social log\u2011ins; avoids bespoke auth code in each service. Service framework Spring Boot (Java 21) Mature ecosystem, first\u2011class observability hooks, developer familiarity. Inter\u2011service sync REST / JSON via Gateway Simpler than gRPC for external integration; benefits from Kong plugins (caching, tracing). Async messaging Apache Kafka High\u2011throughput fan\u2011out (ratings\u2011created, reviews\u2011created); guarantees ordering for leaderboards. Databases PostgreSQL (users, games, ratings), MongoDB (reviews), Redis (cache) Relational consistency for core entities; flexible schema + text search for reviews; in\u2011memory latency for hot game data. External data IGDB API pulled by Launch Svc Avoids replicating a large third\u2011party dataset; keeps catalogue fresh daily. Observability Prometheus + Grafana (metrics), ELK (logs), Jaeger (traces) OSS stack with vibrant community; no vendor lock\u2011in; supports RED/SLO dashboards. CI / CD GitHub Actions \u2192 Docker \u2192 Argo CD (syncs to MicroK8s) GitOps pull\u2011based deployment; Argo CD reconciles manifests inside the local cluster. Infrastructure as Code Helm charts applied manually (MVP); Terraform TBD Quick bootstrap for local experimentation; Terraform will be revisited once multi\u2011cluster or cloud infra is needed. Secrets Kubernetes Secrets sealed by SOPS Encrypt\u2011at\u2011rest in Git, decrypt only at deploy time."},{"location":"arch/decisions/arch-decisions/#tradeoffs-alternatives-considered","title":"Trade\u2011offs &amp; Alternatives considered","text":"<ul> <li>MicroK8s vs managed Kubernetes \u2013 MicroK8s keeps everything local and free but lacks managed\u2011service SLAs; manifests remain portable should the project migrate to a cloud provider.</li> <li>HTTP vs HTTPS in MVP \u2013 Shipping with HTTP accelerates feedback but creates a security to\u2011do before go\u2011live (automated TLS, cert rotation).</li> <li>Helm vs Terraform for infra tools \u2013 Helm offers fast installs; Terraform enables stateful governance and drift detection. The team will reassess once infrastructure grows.</li> </ul> <p>The team will revisit these decisions quarterly; any change will be captured here as ADR\u2011nnn.</p>"},{"location":"arch/decisions/arch-decisions/#adr-001-remove-lombok","title":"ADR 001 \u2013 Remove Lombok","text":"<p>Date: 2025\u201106\u201105</p>"},{"location":"arch/decisions/arch-decisions/#status","title":"Status","text":"<ul> <li>Accepted</li> </ul>"},{"location":"arch/decisions/arch-decisions/#context","title":"Context","text":"<ul> <li> <p>The project originally adopted Lombok to generate boilerplate (getters, setters, equals/hashCode, builders) for domain objects.</p> </li> <li> <p>Since Java 16 introduced records and Java 21 is now our baseline, most DTOs and immutable value types can be expressed concisely without external annotation processors.</p> </li> <li> <p>Annotation processing in Lombok lengthens compilation, complicates reflection\u2011based libraries (e.g. Jackson), and breaks with every new major JDK until Lombok is updated.</p> </li> <li> <p>Onboarding new developers requires installing Lombok IDE plugins; missing it yields confusing compile errors.</p> </li> <li> <p>Static\u2011code\u2011analysis and AOT/native\u2011image tools struggle to see generated members, requiring extra configuration.</p> </li> </ul>"},{"location":"arch/decisions/arch-decisions/#decision","title":"Decision","text":"<ul> <li>Remove the Lombok dependency (<code>org.projectlombok:lombok</code>) from all modules.</li> <li> <p>Replace:</p> </li> <li> <p>Immutable POJOs \u2192 Java records.</p> </li> <li> <p>Mutable entities \u2192 explicit constructors plus IntelliJ \u201cGenerate\u201d for accessors.</p> </li> <li> <p>Lombok builders \u2192 standard builder patterns or MapStruct builders where needed.</p> </li> <li> <p>Delete <code>@Getter</code>, <code>@Setter</code>, <code>@Builder</code>, <code>@Value</code>, <code>@Slf4j</code>, and related annotations from source.</p> </li> </ul>"},{"location":"arch/decisions/arch-decisions/#consequences","title":"Consequences","text":"<ul> <li> <p>Pros</p> </li> <li> <p>IDE\u2011agnostic code; no plugin prerequisite.</p> </li> <li> <p>Faster incremental builds (~15\u201120% measured locally).</p> </li> <li> <p>Cleaner stack traces and easier debugging (no synthetic methods).</p> </li> <li> <p>Future\u2011proof: no waiting for Lombok updates each JDK release.</p> </li> <li> <p>Cons</p> </li> <li> <p>One\u2011off refactor touching ~240 files; larger diff PR.</p> </li> <li> <p>Slightly more verbose getters/setters in a few mutable classes.</p> </li> <li> <p>Mitigations</p> </li> <li> <p>Automated migration script (OpenRewrite lombok\u2011to\u2011records recipe) plus IDE refactor shortcuts keep effort to about two developer\u2011days.</p> </li> <li> <p>Code review checklist updated to prevent re\u2011introducing Lombok.</p> </li> </ul>"},{"location":"arch/decisions/arch-decisions/#adr-002-local-singlenode-gitops-stack","title":"ADR 002 \u2013 Local Single\u2011Node GitOps Stack","text":"<p>Date: 2025\u201107\u201128</p>"},{"location":"arch/decisions/arch-decisions/#status_1","title":"Status","text":"<ul> <li>Accepted</li> </ul>"},{"location":"arch/decisions/arch-decisions/#context_1","title":"Context","text":"<ul> <li>The project is a personal training playground operating entirely on Windows 11 + WSL 2. Cloud costs and team size are minimal, so a lightweight, self\u2011contained environment is preferred.</li> </ul>"},{"location":"arch/decisions/arch-decisions/#decision_1","title":"Decision","text":"<ol> <li>Runtime platform \u2013 adopt MicroK8s for container orchestration. It provides upstream\u2011compatible Kubernetes with a tiny footprint and is easy to reset or upgrade.</li> <li>Ingress strategy \u2013 expose services exclusively through Kong Ingress Controller. Future work will explore an external Edge CDN once public traffic or multi\u2011region latency becomes a concern.</li> <li>Protocol (MVP) \u2013 all endpoints are served over HTTP. TLS termination and certificate\u2011automation will be introduced when external exposure is required.</li> <li>Infrastructure tool installation \u2013 deploy platform components (Kong, Keycloak, Prometheus, etc.) via Helm charts executed manually. When the stack grows or moves to cloud, we will reassess using Terraform for declarative state management.</li> <li>Application delivery \u2013 business services are GitOps\u2011managed: Argo CD syncs manifests to the local MicroK8s cluster.</li> </ol>"},{"location":"arch/decisions/arch-decisions/#consequences_1","title":"Consequences","text":""},{"location":"arch/decisions/arch-decisions/#pros","title":"Pros","text":"<ul> <li>Zero cloud bill \u2013 entire cluster runs locally.</li> <li>Fast feedback \u2013 dev loop (&lt;20s redeploy) courtesy of MicroK8s and Argo CD.</li> <li>Low cognitive load \u2013 HTTP avoids early\u2011stage cert issues; Helm CLI keeps bootstrap simple.</li> <li>Future\u2011ready \u2013 manifests, Argo CD, and Kong are cloud\u2011portable; adding TLS, CDN, or Terraform doesn\u2019t invalidate earlier work.</li> </ul>"},{"location":"arch/decisions/arch-decisions/#cons","title":"Cons","text":"<ul> <li>Security gap \u2013 no in\u2011cluster encryption; must be addressed before any public release.</li> <li>Manual Helm drift \u2013 manual upgrades risk config drift until Terraform or Argo CD Chart\u2011bootstrapping is adopted.</li> <li>Single node \u2013 lacks HA; not suitable for heavy load or production.</li> </ul>"},{"location":"arch/decisions/arch-decisions/#followups","title":"Follow\u2011ups","text":"<ul> <li>Automate TLS with cert\u2011manager + Let\u2019s Encrypt.</li> <li>Evaluate Terraform (or Pulumi) when additional clusters or cloud infra appear.</li> <li>Benchmark Edge\u2011side caching via Kong\u2019s Gateway mode or a managed CDN (Cloudflare, AWS CloudFront) once public users are expected.</li> </ul> <p>This ADR supersedes the corresponding table entries in the Architecture Decisions section; future changes to these points will be tracked as new ADRs.</p>"},{"location":"arch/diagrams/c4/container-diagram/","title":"\ud83d\udce6 Container Diagram","text":""},{"location":"arch/diagrams/c4/container-diagram/#mermaid-c4-container-diagram","title":"MERMAID C4 Container Diagram","text":"<pre><code>C4Container\ntitle Video-Game Platform \u2013 Container View\n\n    Person(webUser, \"User (Web)\")\n    Person(mobileUser, \"User (Mobile)\")\n\n    System_Boundary(videoGamePlatform, \"Video-Game Platform\") {\n\n        Container(cdn,     \"Edge CDN\",   \"CloudFront / Azure CDN\", \"Static + cached API\")\n        Container(apiGw,   \"API Gateway\",\"NGINX / Kong\",          \"Routing / throttling\")\n        Container(keycloak,\"Keycloak\",   \"OIDC\",                  \"Identity &amp; Access\")\n\n        Container_Boundary(svcs, \"Micro-services\") {\n            Container(userSvc,   \"User Svc\",   \"Spring Boot\", \"User profiles, auth\")\n            Container(gameSvc,   \"Game Svc\",   \"Spring Boot\", \"Game catalogue, inventory\")\n            Container(ratingSvc, \"Rating Svc\", \"Spring Boot\", \"Ratings (1-10\u2605)\")\n            Container(reviewSvc, \"Review Svc\", \"Spring Boot\", \"Text reviews\")\n            Container(launchSvc, \"Launch Svc\", \"Spring Boot\", \"Promotion launches, IGDB sync\")\n        }\n        Container(allSvcs, \"All Micro-services\", \"Logical\")\n\n        ContainerDb(pgUsers,   \"users_db\",    \"PostgreSQL\")\n        ContainerDb(pgGames,   \"games_db\",    \"PostgreSQL\")\n        ContainerDb(pgRatings, \"ratings_db\",  \"PostgreSQL\")\n        ContainerDb(mongoRev,  \"reviews_db\",  \"MongoDB\")\n        ContainerDb(redis,     \"Redis cache\", \"Redis\")\n        ContainerDb(kafka,     \"Kafka bus\",   \"Kafka\")\n\n        Container_Ext(igdb, \"IGDB API\", \"REST\", \"Third-party\")\n\n        Rel(webUser,    cdn,      \"HTTPS\")\n        Rel(mobileUser, cdn,      \"HTTPS\")\n        Rel(cdn,        apiGw,    \"HTTPS / REST\")\n        Rel(apiGw,      keycloak, \"Token introspection\")\n        Rel(apiGw, allSvcs, \"REST / JSON\")\n        Rel_D(userSvc,   pgUsers,   \"JDBC\")\n        Rel_D(gameSvc,   pgGames,   \"JDBC\")\n        Rel_D(ratingSvc, pgRatings, \"JDBC\")\n        Rel_D(reviewSvc, mongoRev,  \"MongoDB\")\n        Rel(gameSvc,   redis,     \"cache\")\n        Rel_L(ratingSvc, kafka,   \"rating-created\")\n        Rel_L(reviewSvc, kafka,   \"review-created\")\n        Rel_R(launchSvc, igdb,    \"pulls\")\n    }\n</code></pre>"},{"location":"arch/diagrams/c4/container-diagram/#plantuml-c4-container-diagram","title":"PLANTUML C4 Container Diagram","text":"<pre>4b632a903bb92b2d7adeadb45170d44664f9b5d44aba0dd568f35a091f823c1e946135eeda645d4346b8c83c2f9b4ca8b6e649bffeede9da01d6e13e372d28b4</pre>"},{"location":"arch/diagrams/c4/context-diagram/","title":"\ud83d\udd17 Context Diagram","text":""},{"location":"arch/diagrams/c4/context-diagram/#mermaid-diagram","title":"MERMAID DIAGRAM","text":"<pre><code>C4Context\ntitle Video-Game Platform \u2013 System Context\n\n    Person(webUser, \"User (Web)\", \"Navigates from browser\")\n    Person(mobileUser, \"User (Mobile)\", \"Navigates from smartphone / tablet\")\n    System_Boundary(videoGamePlatform, \"Video-Game Platform\") {\n        Container(apiGw,       \"API Gateway\",        \"NGINX / Kong\",        \"Routes and rate-limits calls\")\n        Container(keycloak,    \"Identity Provider\",  \"Keycloak\",            \"Auth / token introspection\")\n        Container_Ext(igdb,    \"IGDB API\",           \"REST\",                \"Third-party game metadata\")\n        Boundary(appLayer, \"Application Services\") {\n            Container(allSvcs, \"All Micro-services\", \"Logical\")\n        }\n    }\n\n    Rel(webUser,  apiGw,  \"HTTPS\")\n    Rel(mobileUser, apiGw, \"HTTPS\")\n    Rel(apiGw, keycloak, \"JWT introspection\")\n    Rel(apiGw, allSvcs,  \"REST\")\n    Rel_R(allSvcs, igdb,  \"pulls\", \"HTTPS\")\n</code></pre>"},{"location":"arch/diagrams/c4/context-diagram/#plantuml-diagram","title":"PLANTUML DIAGRAM","text":"<pre>f7b77074292d84ceb7bae3e41b55ccc043a9c0abc0fffb460d95aaddcbf28087997d607bf34fd13ea2ac112f8ec66aae44e97032c5a0cd4e9960f86c5682ec9d</pre>"},{"location":"arch/diagrams/c4/deployment-diagram/","title":"\ud83d\udda5\ufe0f Infrastructure","text":""},{"location":"arch/diagrams/c4/deployment-diagram/#mermaid-c4-deployment-diagram","title":"MERMAID C4 Deployment Diagram","text":"<pre><code>C4Deployment\ntitle Video-Game Platform \u2013 Infrastructure View\n\nNode(client, \"Client Side\") {\n    Container(browser,  \"Web / Mobile Browser\",  \"Mozilla, Chrome, Edge\")\n}\n\nNode(edge, \"Edge Tier\") {\n    Container(cdn,  \"Edge CDN\",  \"Varnish / CloudFront\")\n}\n\nNode(cluster, \"Kubernetes Cluster\") {\n    Container(apiGw,   \"API Gateway\", \"Kong Ingress\")\n    Container(keycloak,\"Keycloak\",    \"OIDC\")\n    Container(svcs,    \"Micro-services (5\u00d7)\", \"Spring Boot Pods, HPA\")\n    Container(kafka,   \"Kafka\",       \"StatefulSet 3\u00d7\")\n    Container(redis,   \"Redis\",       \"StatefulSet\")\n    Container(pg,      \"PostgreSQL\",  \"StatefulSet 3\u00d7\")\n    Container(mongo,   \"MongoDB\",     \"StatefulSet 3\u00d7\")\n}\n\nNode(observ, \"Observability Stack\") {\n    Container(prom, \"Prometheus\", \"Helm Chart\")\n    Container(graf, \"Grafana\",    \"Deployment\")\n    Container(elk,  \"ELK Stack\",  \"Elastic Cloud / ECK\")\n}\n\nRel(browser, cdn,  \"HTTPS\")\nRel(cdn,     apiGw,\"HTTPS\")\nRel(apiGw,   svcs, \"REST\")\nRel(svcs,    kafka,\"Kafka protocol\")\nRel(svcs,    pg,   \"JDBC\")\nRel(svcs,    mongo,\"Driver\")\nRel(svcs,    redis,\"Cache\")\nRel(svcs,    prom, \"Scraped metrics\")\nRel(svcs,    elk,  \"Filebeat logs\")\nRel_R(svcs,  keycloak,\"JWT introspection\")\nRel_L(apiGw, keycloak,\"JWT introspection\")\nRel_D(prom,  graf, \"Dashboards\")\nRel_D(elk,   graf, \"Loki datasource\")\n</code></pre>"},{"location":"arch/diagrams/c4/deployment-diagram/#plantuml-c4-deployment-diagram","title":"PLANTUML C4 Deployment Diagram","text":"<pre>330a1ac725150db0e683311ebd5cfd7c5eaf4301aaba8c0d1435ff3a9d3a4a0ddce089312adf53ceed7b96b4479f398f22925dbea972acc6b0984e981ddebb83</pre>"},{"location":"arch/diagrams/datamodel/erd/","title":"\ud83d\uddfa\ufe0f Entity-Relationship Diagram (ERD)","text":"<pre><code>erDiagram\n    USERS {\n        UUID  id PK\n        string email  \"unique\"\n        string display_name\n        datetime created_at\n    }\n\n    GAMES {\n        UUID  id PK\n        string title\n        string slug  \"unique\"\n        date   release_date\n        string platform\n        string genre\n        text   description\n        decimal average_rating\n    }\n\n    RATINGS {\n        UUID     id PK\n        UUID     user_id  FK\n        UUID     game_id  FK\n        tinyint  score  \"1-10\"\n        datetime created_at\n        datetime updated_at\n    }\n\n    REVIEWS {\n        UUID     id PK\n        UUID     user_id  FK\n        UUID     game_id  FK\n        text     body\n        smallint score  \"1-10\"\n        datetime created_at\n        datetime updated_at\n    }\n\n    LAUNCH {\n        UUID   id PK\n        UUID   game_id FK\n        date   launch_date\n        datetime fetched_at  \"when pulled from IGDB\"\n    }\n\n    USERS  ||--o{ RATINGS  : \"rates\"\n    USERS  ||--o{ REVIEWS  : \"writes\"\n    GAMES  ||--o{ RATINGS  : \"has\"\n    GAMES  ||--o{ REVIEWS  : \"has\"\n    GAMES  ||--o{ LAUNCH : \"appears in\"\n</code></pre>"},{"location":"arch/diagrams/observability/obs-diagram/","title":"\ud83d\udd0e Observability","text":""},{"location":"arch/diagrams/observability/obs-diagram/#mermaid-diagram","title":"MERMAID DIAGRAM","text":"<pre><code>%%{init:{\n  \"theme\":\"base\",\n  \"themeVariables\":{\"fontSize\":\"18px\"},\n  \"flowchart\":{\"rankSpacing\":60,\"nodeSpacing\":50}\n}}%%\nflowchart TD\n    subgraph \"Application Pods\"\n        direction TB\n        svc1[\"User Svc\"]:::svc\n        svc2[\"Game Svc\"]:::svc\n        svc3[\"Rating Svc\"]:::svc\n        svc4[\"Review Svc\"]:::svc\n        svc5[\"Launch Svc\"]:::svc\n    end\n\n    subgraph \"Metrics Pipeline\"\n        prom[(\"Prometheus&lt;br/&gt;scrape\")]:::metric\n        graf[(\"Grafana&lt;br/&gt;dashboards\")]:::ui\n    end\n\n    subgraph \"Logs Pipeline\"\n        filebeat[(\"Filebeat&lt;br/&gt;Side-car\")]:::log\n        elk[(\"ELK Stack&lt;br/&gt;(ES + Kibana)\")]:::log\n    end\n\n    subgraph \"Tracing Pipeline\"\n        otel[(\"OpenTelemetry&amp;nbsp;Collector\")]:::trace\n        jaeger[(\"Jaeger UI\")]:::ui\n    end\n\n    classDef svc    fill:#0d6efd,color:#fff,stroke:#003d9c;\n    classDef metric fill:#198754,color:#fff;\n    classDef log    fill:#6c757d,color:#fff;\n    classDef ui     fill:#6610f2,color:#fff;\n    classDef trace  fill:#d63384,color:#fff;\n\n    %% flows\n    svc1 --&gt;|scrape /metrics| prom\n    svc2 --&gt; prom\n    svc3 --&gt; prom\n    svc4 --&gt; prom\n    svc5 --&gt; prom\n\n    svc1 -- Filebeat --&gt; filebeat\n    svc2 -- Filebeat --&gt; filebeat\n    svc3 -- Filebeat --&gt; filebeat\n    svc4 -- Filebeat --&gt; filebeat\n    svc5 -- Filebeat --&gt; filebeat\n    filebeat --&gt; elk\n\n    svc1 -- OTLP --&gt; otel\n    svc2 --&gt; otel\n    svc3 --&gt; otel\n    svc4 --&gt; otel\n    svc5 --&gt; otel\n    otel --&gt; jaeger\n\n    prom --&gt; graf\n    elk  --&gt; graf\n    jaeger --&gt; graf\n</code></pre>"},{"location":"arch/diagrams/observability/obs-diagram/#plantuml-diagram","title":"PLANTUML DIAGRAM","text":"<pre>6693075b1c510a2747c5d68ba954aa44c6b3f145eb911d6ab3656311e46c6bb1e839750555917a4adcd2c7da89d80efc619ab259f609965427fd2a6a571d634d</pre>"},{"location":"arch/diagrams/software/software-diagram/","title":"\ud83d\udd00 Software Flowchart","text":""},{"location":"arch/diagrams/software/software-diagram/#mermaid-diagram","title":"MERMAID DIAGRAM","text":"<pre><code>flowchart TD\n    %% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 PRESENTATION \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph PL[\"Presentation Layer\"]\n        direction TB\n        WebApp[\"\ud83d\udcbb Web App\"]\n        MobileApp[\"\ud83d\udcf1 Mobile App\"]\n    end\n    %% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 EDGE/API \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph EA[\"Edge &amp; API Layer\"]\n        direction TB\n        CDN[(\"\ud83c\udf10 CDN\")]\n        API[\"\ud83d\udeaa API Gateway\"]\n        Auth[\"\ud83d\udd10 Keycloak\"]\n        API --&gt;|\"token introspection\"| Auth\n    end\n\n    %% \u2500\u2500\u2500\u2500\u2500\u2500 APPLICATION \u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph AL[\"Application Layer\"]\n        direction BT\n        UserSvc[\"\ud83d\udc64 User Svc\"]\n        GameSvc[\"\ud83c\udfae Game Svc\"]\n        RatingSvc[\"\u2b50 Rating Svc\"]\n        ReviewSvc[\"\ud83d\udcdd Review Svc\"]\n        LaunchSvc[\"\ud83d\ude80 Launch Svc\"]\n    end\n\n    %% \u2500\u2500\u2500\u2500\u2500\u2500\u2500 MESSAGING \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph MB[\"Messaging Bus\"]\n        Kafka[(\"\ud83e\ude82 Kafka\")]\n    end\n\n    %% \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 DATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph DL[\"Data Layer\"]\n        direction TB\n        PgUsers[(\"\ud83d\udc18 users_db\")]\n        PgGames[(\"\ud83d\udc18 games_db\")]\n        PgRatings[(\"\ud83d\udc18 ratings_db\")]\n        Redis[(\"\u26a1 Redis\")]\n        Mongo[(\"\ud83c\udf43 MongoDB&lt;br/&gt;reviews_db\")]\n    end\n\n    %% \u2500\u2500\u2500\u2500\u2500 OBSERVABILITY \u2500\u2500\u2500\u2500\u2500\u2500\n    subgraph OBS[\"Observability / Platform\"]\n        Prom[(\"\ud83d\udcc8 Prometheus\")]\n        Graf[(\"\ud83d\udcca Grafana\")]\n        ELK[(\"\ud83d\udcda ELK\")]\n    end\n\n    IGDB([\"\ud83c\udfaf IGDB API\"])\n\n    %% communications (unchanged, condensed)\n    WebApp --&gt;|HTTPS| CDN\n    MobileApp --&gt;|HTTPS| CDN\n    CDN --&gt;|HTTPS| API\n    API --&gt;|REST| UserSvc &amp; GameSvc &amp; RatingSvc &amp; ReviewSvc &amp; LaunchSvc\n    UserSvc  --&gt; PgUsers\n    GameSvc  --&gt; PgGames\n    RatingSvc--&gt; PgRatings\n    ReviewSvc--&gt; Mongo\n    LaunchSvc--&gt; PgGames\n    GameSvc  &lt;--&gt;|cache| Redis\n    RatingSvc --&gt;|rating-created| Kafka\n    ReviewSvc --&gt;|review-created| Kafka\n    Kafka --&gt; GameSvc\n    LaunchSvc --&gt;|pull| IGDB\n    classDef layer fill:#f7f7f7,stroke:#ccc,stroke-width:1px\n    class PL,EA,AL,MB,DL,OBS layer\n</code></pre>"},{"location":"arch/diagrams/software/software-diagram/#plantuml-diagram","title":"PLANTUML DIAGRAM","text":"<pre>0689b5ce982f7f486cd0179882000789bc95bc18e9851a27e6762d4e6f8caef07e98c7551e16cfdb4e1034298d5e443852cd33558c716a668d36e0f3d5300058</pre>"},{"location":"arch/tech/stack/","title":"\u2699\ufe0f Tech Stack","text":""},{"location":"arch/tech/stack/#technology-stack-mvp-localfirst-edition","title":"\ud83d\udee0\ufe0f Technology Stack \u2013 MVP (Local\u2011First Edition)","text":"Layer / Concern Technology Rationale Front\u2011end React 18 + Vite + TypeScript MIT licences; instant HMR, modern bundling. Design system Tailwind CSS + Headless UI Utility CSS + accessible headless components. Mobile / PWA Google Workbox Apache\u20112.0; generates service\u2011worker for offline catalogue. API Gateway / Ingress Kong OSS (IngressClass) Unified gateway: OIDC, rate\u2011limit, gRPC, WebSocket. Edge CDN to be evaluated post\u2011MVP. Back\u2011end micro\u2011services Spring Boot 3 (Java 21) Apache\u20112.0; mature ecosystem, AOT native option. Sync API contracts OpenAPI 3.1 + springdoc Generate docs + TS client; both Apache\u20112.0. Async messaging / event log \u2605 Apache Kafka + Strimzi (K8s operator) High\u2011throughput, free to self\u2011host; Strimzi automates rolling upgrades. Databases Catalogue: PostgreSQL 16Reviews: MongoDB 6Ratings: PostgreSQL table <code>user_ratings</code>Search: OpenSearch 2Cache: Redis 7 OSS licences (Postgres LGPL, MongoDB SSPL, OpenSearch Apache\u20112.0, Redis BSD). Identity &amp; SSO Keycloak 23 (OIDC) Apache\u20112.0; social logins, RBAC, tokens. AuthZ policy Open Policy Agent (OPA) sidecar Apache\u20112.0; decoupled fine\u2011grained authZ. Container build Paketo Buildpacks Apache\u20112.0; reproducible CVE\u2011scanned images. Orchestrator \u2605 MicroK8s (single\u2011node Kubernetes on WSL 2) Lightweight, upstream\u2011compatible; perfect for local training with zero cloud bill. Service Mesh Istio 1.22 Apache\u20112.0; mTLS, retries, canary traffic shifting. CI / CD GitHub Actions (CI) \u2192 Argo CD (GitOps) Pull\u2011based delivery reconciles manifests inside MicroK8s. Observability OpenTelemetry \u2192 Prometheus / Grafana / Loki / Tempo CNCF stack; all OSS. Security tooling Trivy \u2022 OWASP ZAP \u2022 Renovate MIT / Apache\u20112.0; shift\u2011left scans &amp; dep updates. Static docs site MkDocs Material (GitHub Pages) MIT licence; GitHub Pages free for public projects. Infrastructure tools install Helm charts (manual) \u2014 Terraform TBD Quick bootstrap; Terraform will be revisited when infra grows beyond single node."},{"location":"archetypes/rest-postgre-archetype/","title":"\u26f5\ufe0f rest\u2011postgre\u2011archetype","text":"<p>A Maven archetype that spins up a production\u2011ready Spring Boot REST API backed by PostgreSQL, following Hexagonal Architecture &amp; CQRS. Generate fully wired services in seconds with consistent code style, Docker assets, Integration and Acceptance tests and OpenAPI contracts.</p>"},{"location":"archetypes/rest-postgre-archetype/#1-what-is-a-maven-archetype","title":"1 What is a Maven archetype?","text":"<p>A Maven archetype is a project template. It packages:</p> <ul> <li>a directory structure</li> <li>source files with <code>${placeholders}</code></li> <li>a descriptor (<code>archetype-metadata.xml</code>) that tells Maven how to replace those placeholders when you generate a new project.</li> </ul> <p>Think of it as <code>spring\u2011init</code> on steroids and totally customisable for your organisation.</p>"},{"location":"archetypes/rest-postgre-archetype/#2-what-does-restpostgrearchetype-give-you","title":"2 What does rest\u2011postgre\u2011archetype give you?","text":"<ul> <li>Spring Boot 3.4.x starter with MapStruct, SpringDoc.</li> <li>PostgreSQL datasource (H2 in tests).</li> <li>Dockerfile and docker\u2011compose.yml for local / CI runs.</li> <li>Hexagonal folder layout (<code>domain/</code>, <code>application/</code>, <code>infrastructure/</code>).</li> <li>Pre\u2011wired OpenAPI spec &amp; generated interfaces.</li> <li>Opinionated logging, health checks and metrics.</li> </ul>"},{"location":"archetypes/rest-postgre-archetype/#3-installing-the-archetype","title":"3 Installing the archetype","text":"<pre><code># inside the mono\u2011repo root\ncd rest-postgre-archetype\nmvn clean install         # puts the archetype jar in your ~/.m2 repository\nmvn archetype:update-local-catalog\n</code></pre>"},{"location":"archetypes/rest-postgre-archetype/#4-generating-a-new-service-from-the-archetype","title":"4 Generating a new service from the archetype","text":"<pre><code>mvn archetype:generate\n  -DarchetypeGroupId=com.acme\n  -DarchetypeArtifactId=rest-postgre-archetype\n  -DarchetypeVersion=1.0.0\n  -DarchetypeCatalog=remote\n  -DarchetypeRepository=http://localhost:8081/repository/archetypes-releases\n</code></pre> <p>Maven will prompt for each property (see table below). Everything is interactive unless you pass -Dproperty=value on the CLI.</p>"},{"location":"archetypes/rest-postgre-archetype/#5-archetype-variables-archetype-metadataxml","title":"5 Archetype variables (archetype-metadata.xml)","text":"Placeholder Meaning entity Business aggregate root; used for class names (GameService, GameRepository) and OpenAPI tags. Make sure to write capitalized uncapitalizedEntity Same as entity but uncapitalized serverPort Port Spring Boot listens on (and is published in docker-compose.yml) dbName PostgreSQL database name for dev/test. dbUser DB username injected in application.yaml &amp; compose file. dbPassword DB password (change it!). <p>All of them live under  in archetype-metadata.xml and are marked as filtered in the descriptor, so they propagate to .java, .yaml, .md, Docker assets, etc."},{"location":"archetypes/rest-postgre-archetype/#6-example-noninteractive-generation","title":"6 Example: non\u2011interactive generation","text":"<pre><code>mvn archetype:generate \\\n  -DarchetypeGroupId=com.acme \\\n  -DarchetypeArtifactId=rest-postgre-archetype \\\n  -DarchetypeVersion=1.0.0 \\\n  -DarchetypeCatalog=local \\\n  -DgroupId=com.acme.games \\\n  -DartifactId=game-service \\\n  -Dversion=1.0.0-SNAPSHOT \\\n  -Dpackage=com.acme.games \\\n  -Dentity=Game \\\n  -DserverPort=8082 \\\n  -DdbName=gamesdb \\\n  -DdbUser=gameuser \\\n  -DdbPassword=changeit \\\n  -B\n</code></pre> <p>The -B flag is batch mode\u2014ideal for CI/CD pipelines.</p>"},{"location":"requirements/functional/","title":"\ud83d\udcdd MVP Functional Requirements \u2013 Videogame Platform","text":"<p>Scope: minimal set needed to go live and validate product/market fit.</p> ID User Story Acceptance Criteria Priority AUTH-001 As a guest user I want to register with email/password or Google OAuth so that I can create an account \u2013 Registration form validates email format &amp; password strength. \u2013 Confirmation email with one-click link. \u2013 Reject duplicate emails. \u2013 Stores password hashed (argon2). Must AUTH-002 As a registered user I want to log in so that I can access personalised features \u2013 OIDC session cookie issued. \u2013 3 failed attempts \u2192 captcha. \u2013 \u201cRemember me\u201d 30-day token. Must RATE-001 As a logged-in gamer I want to rate a videogame 1-10 stars so that my opinion is counted \u2013 Hover + click UI updates instantly (optimistic). \u2013 Only one rating per user per game; update allowed. \u2013 Average rating recalculated in \u2264200 ms. Must SRCH-001 As a visitor I want to search for a videogame by title, genre, platform or release year \u2013 Search bar auto-suggests top 5 titles. \u2013 Results paginated 20 per page. \u2013 Response time &lt; 150 ms P95 under 500 RPS. Must REV-001 As a logged-in gamer I want to write a textual review for a game so others can read it \u2013 Rich-text editor (markdown). \u2013 Length 50-2000 chars. \u2013 Profanity filter rejects offensive words. \u2013 Each user can edit/delete their own review. Should HOME-001 As a visitor I want a home page that showcases new videogame launches so I can discover recent titles \u2013 Carousel of latest 10 releases (sorted by launch_date desc). \u2013 \u201cView all\u201d link leads to <code>/new-releases</code> list. \u2013 Launch data pulled from external API (e.g., IGDB) every 6 h. Must"},{"location":"requirements/non-functional/","title":"\u2699\ufe0f Non-Functional","text":""},{"location":"requirements/non-functional/#non-functional-mvp-level","title":"Non-Functional (MVP-level)","text":"<ul> <li>Performance: API P99 &lt; 300 ms, homepage P95 FCP &lt; 2 s on 3G.</li> <li>Security: OWASP Top-10 mitigations, HTTPS-only, CSP headers.</li> <li>Compliance: GDPR \u2013 deletion &amp; export endpoints in backlog.</li> <li>Availability: 99.5 % monthly SLO for public endpoints.</li> <li>Observability: trace &gt; 90 % sampled in staging, 10 % in prod; custom metrics for rating submissions &amp; searches.</li> </ul>"},{"location":"requirements/non-functional/#non-functional-requirements-detailed-explanation","title":"\ud83d\udd12\ud83d\udcc8 Non-Functional Requirements \u2013 Detailed Explanation","text":"NFR What the target means in practice Why it matters for a videogame catalogue How we\u2019ll measure &amp; enforce it Performance\u2022 API P99 &lt; 300 ms\u2022 Homepage FCP &lt; 2 s on 3 G API P99 \u21d2 99 % of backend requests (GET /search, POST /rating \u2026) must finish &lt; 300 ms inside the pod, CDN latency excluded.FCP (First Contentful Paint) is a Core Web Vital; the first text/image on <code>/</code> must appear within 2 s on a 1.6 Mbps (Fast 3 G) simulation. Discovery must feel instant. Slow pages drop engagement; every +100 ms can cut conversions. \u2022 k6/Gatling load test in CI.\u2022 Prometheus histogram <code>http_request_duration_seconds{quantile=\"0.99\"}</code>.\u2022 Lighthouse-CI budget fails if FCP &gt; 2 s. Security\u2022 OWASP Top-10 mitigations\u2022 HTTPS-only\u2022 CSP headers Protect against injection, XSS, broken auth, etc. All traffic via TLS 1.3 with HSTS. <code>Content-Security-Policy</code> blocks inline scripts &amp; mixed content. Ratings/reviews are user-generated; an XSS could deface pages or steal tokens. HTTPS secures logins on public Wi-Fi. \u2022 Nightly OWASP ZAP scan; high-sev findings block release.\u2022 ALB forces 443; port 80 \u2192 301.\u2022 Helmet middleware sets CSP, X-Frame-Options; Snyk/Dependabot keep deps patched. Compliance\u2022 GDPR Right-to-Be-Forgotten &amp; export endpoints (backlog) Data model &amp; APIs must let us delete all personal data (ratings, reviews, tokens) or export it (JSON/CSV). Self-service UI can wait, but backend hooks must exist. EU users may sign up day 1; retrofitting GDPR later is expensive and risky. \u2022 Unit tests assert <code>DELETE /user/{id}</code> cascades.\u2022 Tables/indices tag columns with <code>pii=true</code> for future automation. Availability\u2022 99 .5 % SLO / month \u2264 3 h 40 m total downtime per month, including planned maint in business hours. Multi-AZ but not multi-region. MVP tolerates short night outages but must be \u201cup most of the time\u201d to collect feedback. \u2022 Uptime ping \u2192 Grafana SLO dashboard.\u2022 Post-mortem if error-budget burn &gt; 50 %. Observability\u2022 \u2265 90 % traces sampled in staging, 10 % in prod\u2022 Business metrics for ratings &amp; searches Tracing: every request in staging; 10 % in prod to manage cost.Metrics: <code>ratings.count</code>, <code>reviews.count</code>, <code>search.latency</code>, <code>rating.avg</code>. Debugging distributed flows + measuring feature uptake (e.g., Twitch promo spike) requires traces &amp; dashboards. \u2022 OpenTelemetry SDK \u2192 Jaeger (staging) / Tempo (prod).\u2022 Loki logs correlated by <code>trace_id</code>.\u2022 Prometheus alerts on metric anomalies."},{"location":"requirements/non-functional/#architectural-implications","title":"Architectural implications","text":"<ul> <li>Performance \u2192 CDN, Redis edge cache, Brotli, async DB writes.</li> <li>Security \u2192 OAuth/OIDC provider, mTLS in service mesh, Trivy scans in CI.</li> <li>Availability \u2192 stateless pods across 3 AZs, RDS Multi-AZ or DynamoDB global tables.</li> <li>Observability \u2192 OTel starter wired into every Spring Boot service from Sprint 0.</li> <li>Compliance \u2192 All tables include <code>user_id</code>; prefer soft-delete + TTL for cheap RTBF.</li> </ul> <p>Embedding these NFRs from the start keeps the MVP small and production-ready, avoiding costly rewrites later.</p>"},{"location":"tools/checkstyle/","title":"Checkstyle Tutorial (2025)","text":""},{"location":"tools/checkstyle/#1-what-is-checkstyle","title":"1  What Is Checkstyle?","text":"<p>Checkstyle is an open\u2011source static\u2011analysis tool that scans Java source files and reports breaches of a coding standard\u2014formatting, naming, Javadoc, import order, complexity, and more. It walks the Abstract Syntax Tree (AST) produced by <code>javac</code> and applies a list of modules (rules). Each rule that fires produces a violation, which can be surfaced as a warning or a build\u2011breaking error.</p> <p>Typical reasons to adopt it:</p> <ul> <li>Keep code reviews focused on business logic instead of whitespace.</li> <li>Catch bugs such as missing <code>@Override</code>, empty <code>catch</code> blocks, or duplicated imports early.</li> <li>Guarantee that every repository shares the same style guide.</li> </ul>"},{"location":"tools/checkstyle/#2-using-checkstyle-with-maven","title":"2  Using Checkstyle with Maven","text":""},{"location":"tools/checkstyle/#21-add-versions-in-the-parent-pom","title":"2.1 Add versions in the parent POM","text":"<pre><code>&lt;properties&gt;\n    &lt;!-- Last stable versions \u2013 April 2025 --&gt;\n    &lt;maven.checkstyle.version&gt;3.6.0&lt;/maven.checkstyle.version&gt;\n    &lt;checkstyle.version&gt;10.24.0&lt;/checkstyle.version&gt;\n&lt;/properties&gt;\n</code></pre>"},{"location":"tools/checkstyle/#22-configure-the-plugin-once","title":"2.2 Configure the plugin once","text":"<pre><code>&lt;build&gt;\n  &lt;pluginManagement&gt;\n    &lt;plugins&gt;\n      &lt;plugin&gt;\n        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n        &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;\n        &lt;version&gt;${maven.checkstyle.version}&lt;/version&gt;\n\n        &lt;!-- pin the engine version you want --&gt;\n        &lt;dependencies&gt;\n          &lt;dependency&gt;\n            &lt;groupId&gt;com.puppycrawl.tools&lt;/groupId&gt;\n            &lt;artifactId&gt;checkstyle&lt;/artifactId&gt;\n            &lt;version&gt;${checkstyle.version}&lt;/version&gt;\n          &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n\n        &lt;configuration&gt;\n          &lt;!-- shared rules --&gt;\n          &lt;configLocation&gt;${project.basedir}/../dev-platform/checkstyle/google_checks.xml&lt;/configLocation&gt;\n          &lt;encoding&gt;UTF-8&lt;/encoding&gt;\n          &lt;consoleOutput&gt;true&lt;/consoleOutput&gt;\n          &lt;failOnViolation&gt;true&lt;/failOnViolation&gt;\n          &lt;!-- ignore generated code --&gt;\n          &lt;excludeGeneratedSources&gt;true&lt;/excludeGeneratedSources&gt;\n        &lt;/configuration&gt;\n\n        &lt;executions&gt;\n          &lt;execution&gt;\n            &lt;id&gt;verify-style&lt;/id&gt;\n            &lt;phase&gt;verify&lt;/phase&gt;\n            &lt;goals&gt;&lt;goal&gt;check&lt;/goal&gt;&lt;/goals&gt;\n          &lt;/execution&gt;\n        &lt;/executions&gt;\n      &lt;/plugin&gt;\n    &lt;/plugins&gt;\n  &lt;/pluginManagement&gt;\n&lt;/build&gt;\n</code></pre> <p>Each micro\u2011service then needs only:</p> <pre><code>&lt;plugin&gt;\n  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n  &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt;\n&lt;/plugin&gt;\n</code></pre>"},{"location":"tools/checkstyle/#23-running","title":"2.3 Running","text":"Action Command Verify in CI <code>mvn verify</code> (runs <code>checkstyle:check</code>) HTML report <code>mvn checkstyle:checkstyle</code> Ignore failures locally <code>mvn -Dcheckstyle.failOnViolation=false verify</code>"},{"location":"tools/checkstyle/#3-spotless-your-autoformatter-friend","title":"3  Spotless \u2014 Your Auto\u2011Formatter Friend","text":"<p>Checkstyle reports formatting issues; Spotless fixes them automatically.</p>"},{"location":"tools/checkstyle/#31-plugin-snippet","title":"3.1 Plugin snippet","text":"<pre><code>&lt;plugin&gt;\n  &lt;groupId&gt;com.diffplug.spotless&lt;/groupId&gt;\n  &lt;artifactId&gt;spotless-maven-plugin&lt;/artifactId&gt;\n  &lt;version&gt;2.44.4&lt;/version&gt;\n\n  &lt;executions&gt;\n    &lt;!-- format before compile --&gt;\n    &lt;execution&gt;\n      &lt;id&gt;apply-spotless&lt;/id&gt;\n      &lt;phase&gt;process-sources&lt;/phase&gt;\n      &lt;goals&gt;&lt;goal&gt;apply&lt;/goal&gt;&lt;/goals&gt;\n    &lt;/execution&gt;\n\n    &lt;!-- block CI if formatting is wrong --&gt;\n    &lt;execution&gt;\n      &lt;id&gt;check-spotless&lt;/id&gt;\n      &lt;phase&gt;verify&lt;/phase&gt;\n      &lt;goals&gt;&lt;goal&gt;check&lt;/goal&gt;&lt;/goals&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n\n  &lt;configuration&gt;\n    &lt;java&gt;\n      &lt;googleJavaFormat&gt;\n        &lt;version&gt;1.20.0&lt;/version&gt;\n      &lt;/googleJavaFormat&gt;\n\n      &lt;importOrder&gt;\n        &lt;order&gt;com.mycompany,java,javax,org,com&lt;/order&gt;\n        &lt;wildcardsLast&gt;true&lt;/wildcardsLast&gt;\n      &lt;/importOrder&gt;\n\n      &lt;removeUnusedImports/&gt;\n    &lt;/java&gt;\n  &lt;/configuration&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Order matters: because Spotless hooks into <code>process-sources</code>, it runs before Checkstyle, so Checkstyle never complains about issues Spotless can auto\u2011correct.</p>"},{"location":"tools/checkstyle/#32-daily-commands","title":"3.2 Daily commands","text":"Goal Purpose <code>mvn spotless:apply</code> Re\u2011format locally before committing <code>mvn spotless:check</code> Fail CI if any file is mis\u2011formatted <code>-DspotlessRatchetFrom=origin/main</code> Enforce only on changed files"},{"location":"tools/checkstyle/#4-intellij-idea-20251-configuration","title":"4  IntelliJ IDEA 2025.1 Configuration","text":"<ol> <li>Install Checkstyle\u2011IDEA \u2192 Settings \u203a Plugins.  </li> <li>Add your rules file: Settings \u203a Tools \u203a Checkstyle \u2192 \u2795 New \u2192 pick <code>google_checks.xml</code> (or a custom copy).  </li> <li>Tick only that file \u2013 untick the default Google profile if you modified it.  </li> <li>Enable Scan files automatically for real\u2011time feedback.  </li> <li>Exclude generated code in the same dialog: Exclude from scan \u203a generated sources.  </li> <li>(Optional) Install Spotless Apply plugin or configure Save Actions to run <code>spotlessApply</code> on save.  </li> <li>Commit <code>.idea/checkstyle-idea.xml</code> so every teammate inherits the same configuration.</li> </ol>"},{"location":"tools/checkstyle/#5-recap","title":"5  Recap","text":"<ul> <li>Checkstyle = static style checker \u2192 breaks the build on violations.  </li> <li>Spotless = automatic formatter \u2192 fixes what Checkstyle would otherwise flag.  </li> <li>Wire Spotless to <code>process-sources</code> and Checkstyle to <code>verify</code> so the build does:  </li> <li>format \u2192 2. compile \u2192 3. test \u2192 4. style\u2011verify.  </li> <li>Mirror the same XML inside IntelliJ to get instant warnings while coding.</li> </ul> <p>Follow this recipe and your micro\u2011services will stay clean, diffs will shrink, and debates about curly brackets will become ancient history.</p>"},{"location":"tools/ci-cd-guide/","title":"\ud83d\ude80 CI/CD Quick Guide \u2013 Build &amp; Push + Argo CD (GitOps)","text":"<p>Platform: GitHub Actions + Argo CD Date: July 2025 Repository: videogame\u2011platform (Java 21 + Spring Boot 3 micro\u2011services)</p>"},{"location":"tools/ci-cd-guide/#1-gitops-in-a-nutshell","title":"1 \u00b7 GitOps in a Nutshell \ud83e\udd16","text":"<ul> <li>Single source of truth \u2013 desired state (Kubernetes YAML/Helm/Kustomize) lives in git.</li> <li>Pull\u2011based delivery \u2013 the cluster (via the Argo CD controller) pulls &amp; reconciles changes \u2013 no CI job ever <code>kubectl apply</code>s.</li> <li>Immutable artefacts \u2013 CI publishes an image digest (content addressable) to a registry; manifests reference the digest, never <code>latest</code>.</li> <li>Separation of duties</li> </ul> Concern Owner Tool What happens Build &amp; test CI runners GitHub Actions Compiles, tests, signs &amp; scans containers Release Image registry GHCR + Sigstore Stores signed SBOMed images Deploy Argo CD <code>Application</code> CRD Continuously reconciles k8s objects Update Argo CD Image Updater Annotation\u2011driven Writes back the new digest to git <p>This split lets you rollback with <code>git revert</code> and delivers an audit trail of who changed what infra.</p>"},{"location":"tools/ci-cd-guide/#2-continuous-integration-build-and-pushyml","title":"2 \u00b7 Continuous Integration \u2013 <code>build-and-push.yml</code> \ud83d\udd28","text":"Stage Key action Notes Triggers on <code>push</code>, <code>pull_request</code>, nightly cron 10:02 UTC, manual Service\u2011scoped paths (<code>services/**</code>) Matrix <code>service: game-service</code> (extend as repo grows) Parallel build lanes Build &amp; unit tests <code>mvn verify</code> with Temurin 21 Fails fast on JUnit errors Mutation tests PIT 1.19.5; threshold \u2265 80\u202f% Skipped on nightly schedule Static analysis SonarQube scan + Quality Gate Blocks pipeline on new defects Container build Docker Buildx, linux/amd64 Push to <code>ghcr.io/&lt;org&gt;/&lt;repo&gt;/&lt;service&gt;:&lt;sha&gt;</code> Signing Sigstore Cosign keyless Provably attests provenance Security scan Trivy (CRITICAL/HIGH) Fails build on vulnerabilities Artefact export <code>IMAGE_REF</code> with digest sha256 Consumed by Argo CD Image Updater <pre><code># excerpt \u2013 stages trimmed for brevity\n- name: \ud83d\udce6 Build &amp; push image\n  uses: docker/build-push-action@v6\n  with:\n    context: services/${ '{' } matrix.service }\n    push: true\n    tags: |\n      ghcr.io/${ '{' } github.repository }/${ '{' } matrix.service }:${ '{' } github.sha }\n      ghcr.io/${ '{' } github.repository }/${ '{' } matrix.service }:latest\n- name: \ud83d\udd12 Cosign sign (keyless)\n  run: cosign sign --yes ${ '{' } env.IMAGE_REF }\n- name: \ud83d\udee1\ufe0f Trivy image scan\n  uses: aquasecurity/trivy-action@0.31.0\n</code></pre> <p>Secrets/variables required</p> Name Why <code>GITHUB_TOKEN</code> Push to GHCR &amp; write provenance <code>SONAR_TOKEN</code> / <code>SONAR_HOST_URL</code> Quality gate (optional) OIDC trust to GHCR For keyless Cosign verify"},{"location":"tools/ci-cd-guide/#3-continuous-deployment-argocd-appyaml","title":"3 \u00b7 Continuous Deployment \u2013 <code>argocd-app.yaml</code> \ud83d\udea2","text":"<p>The Argo CD Application declares where to pull manifests and how to sync them:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: videogame-platform-dev\n  annotations:\n    argocd-image-updater.argoproj.io/image-list: game-service=ghcr.io/.../game-service\n    argocd-image-updater.argoproj.io/update-strategy.game-service: digest\nspec:\n  source:\n    repoURL: https://github.com/rubhern/videogame-platform.git\n    path: infra/dev/videogame-platform\n    targetRevision: main\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: dev\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n</code></pre> <ul> <li>Image Updater polls the registry, detects the new digest pushed by CI and commits the change back to <code>main</code>.  </li> <li>Argo CD picks up the commit \u2192 Sync \u2192 rolling restart (Kubernetes Deployment with zero\u2011downtime).  </li> <li><code>prune: true</code> removes obsolete resources; <code>selfHeal</code> forces spec\u2011drift back to git.</li> </ul>"},{"location":"tools/ci-cd-guide/#4-endtoend-flow","title":"4 \u00b7 End\u2011to\u2011End Flow \ud83d\udee0\ufe0f\u27a1\ufe0f\ud83d\udda5\ufe0f","text":"<pre><code>sequenceDiagram\n  participant Dev\n  participant GitHub\n  participant CI as GitHub Actions\n  participant GHCR as ghcr.io\n  participant Updater as Argo CD Image Updater\n  participant ArgoCD as Argo CD\n  participant K8s as k3s Cluster\n\n  Dev-&gt;&gt;GitHub: git push (code)\n  GitHub-&gt;&gt;CI: dispatch workflow\n  CI-&gt;&gt;GHCR: build &amp; push image@sha256\n  CI-&gt;&gt;GitHub: status \u2713\n  Updater--&gt;&gt;GHCR: watch tag\n  Updater-&gt;&gt;GitHub: commit new digest to manifests\n  GitHub-&gt;&gt;ArgoCD: webhook\n  ArgoCD-&gt;&gt;K8s: apply manifests\n  K8s--&gt;&gt;ArgoCD: health OK\n</code></pre>"},{"location":"tools/ci-cd-guide/#5-next-steps-hardening","title":"5 \u00b7 Next Steps &amp; Hardening \ud83d\udd12","text":"<ol> <li>Add SBOM generation (<code>docker buildx bake --sbom</code>) and upload it to GHCR.  </li> <li>Enable Progressive Delivery \u2013 use Argo Rollouts for canary analysis before full rollout.  </li> <li>Bootstrap Argo CD via Terraform for repeatable cluster bring\u2011up.  </li> <li>Policy as Code \u2013 integrate <code>Kyverno</code> or <code>Kubewarden</code> to forbid image tags without digests.</li> </ol>"},{"location":"tools/nexus/","title":"\ud83d\uddc4\ufe0f Installing and Using Sonatype Nexus Repository Manager \u2013 Community Edition","text":"<p>Version tested: Nexus 3.67 (May 2025) Works on Linux, macOS, Windows (via Docker Desktop or native ZIP install).</p>"},{"location":"tools/nexus/#1-prerequisites","title":"1  Prerequisites","text":"Tool Minimum version Check Java 11 LTS (only if you do manual install) 11.0.22 <code>java -version</code> Docker Engine / Desktop (recommended) 24.x <code>docker --version</code> 4 GB RAM free \u2014 10 GB disk (initial) \u2014"},{"location":"tools/nexus/#2-quick-install-with-docker","title":"2  Quick install with Docker","text":"<pre><code># 1) Pull and start\ndocker run -d \\\n  --name nexus \\\n  -p 8081:8081 \\\n  -p 5000:5000 \\\n  -v nexus-data:/nexus-data \\   # named volume that persists config &amp; blobs\n  sonatype/nexus3:latest\n\n# 2) Tail logs until you see \"Started Sonatype Nexus\"\ndocker logs -f nexus\n</code></pre>"},{"location":"tools/nexus/#3-firsttime-setup-in-the-ui","title":"3  First\u2011time setup in the UI","text":"<ol> <li>Browse to http://localhost:8081.</li> <li> <p>Unlock Nexus:</p> <p><code>bash cat $(docker volume inspect nexus-data -f '{{ .Mountpoint }}')/admin.password</code></p> <p>Paste the one\u2011time password, press Sign in.</p> </li> <li> <p>Set a new admin password.</p> </li> <li>Choose Skip for anonymous telemetry unless you agree.</li> </ol>"},{"location":"tools/nexus/#4-creating-repositories-if-not-existing","title":"4  Creating repositories (if not existing)","text":""},{"location":"tools/nexus/#41-maven-hosted-repo-for-your-internal-artifacts","title":"4.1 Maven hosted repo (for your internal artifacts)","text":"<ol> <li>Repositories \u2192 Repositories \u2192 Create repository</li> <li>Type: maven2 (hosted)</li> <li>Name: <code>maven-releases</code></li> <li>Version policy: Release</li> <li>Write policy: Allow redeploy (or Allow once for stricter).</li> <li>Layout: Maven2, blob store: default, Create repository.</li> </ol> <p>Repeat for <code>maven-snapshots</code> with Snapshot policy.</p>"},{"location":"tools/nexus/#42-maven-proxy-repo-caches-maven-central","title":"4.2 Maven proxy repo (caches Maven Central)","text":"<ol> <li>Create maven2 (proxy)</li> <li>Name: <code>maven-central</code></li> <li>Remote URL: https://repo1.maven.org/maven2/</li> <li>Storage \u2192 Maximum component age: e.g. 30 days.</li> <li>Create.</li> </ol>"},{"location":"tools/nexus/#43-group-repo-convenient-single-url","title":"4.3 Group repo (convenient single URL)","text":"<ol> <li>Create maven2 (group)</li> <li>Name: <code>maven-public</code></li> <li>Add members: first <code>maven-releases</code>, then <code>maven-snapshots</code>, then <code>maven-central</code>.</li> <li>Create.</li> </ol>"},{"location":"tools/nexus/#5-configure-maven-to-use-nexus","title":"5  Configure Maven to use Nexus","text":"<p>Place in <code>~/.m2/settings.xml</code>:</p> <pre><code>&lt;settings&gt;\n  &lt;mirrors&gt;\n    &lt;mirror&gt;\n      &lt;id&gt;nexus&lt;/id&gt;\n      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;\n      &lt;url&gt;http://localhost:8081/repository/maven-public/&lt;/url&gt;\n    &lt;/mirror&gt;\n  &lt;/mirrors&gt;\n\n  &lt;servers&gt;\n    &lt;server&gt;\n      &lt;id&gt;nexus-releases&lt;/id&gt;\n      &lt;username&gt;admin&lt;/username&gt;\n      &lt;password&gt;\u2022\u2022\u2022\u2022&lt;/password&gt;\n    &lt;/server&gt;\n    &lt;server&gt;\n      &lt;id&gt;nexus-snapshots&lt;/id&gt;\n      &lt;username&gt;admin&lt;/username&gt;\n      &lt;password&gt;\u2022\u2022\u2022\u2022&lt;/password&gt;\n    &lt;/server&gt;\n  &lt;/servers&gt;\n&lt;/settings&gt;\n</code></pre> <p>Publish:</p> <pre><code>mvn clean deploy -DaltDeploymentRepository=nexus-snapshots::default::http://localhost:8081/repository/maven-snapshots/\n</code></pre>"},{"location":"tools/nexus/#6-docker-registry-via-nexus","title":"6  Docker registry via Nexus","text":"<ol> <li>Create docker (hosted), name <code>docker-hosted</code>, HTTP Port 5000.</li> <li>In Docker Clients tick \u201cV2 signature\u201d.</li> <li><code>docker login localhost:5000 -u admin</code>.</li> <li>Tag &amp; push:</li> </ol> <p><code>bash    docker tag alpine localhost:5000/demo/alpine:3.20    docker push localhost:5000/demo/alpine:3.20</code></p>"},{"location":"tools/nexus/#7-user-role-management","title":"7  User &amp; Role management","text":"<ul> <li>Security \u2192 Users \u2192 Create local user Id: <code>ci</code>, Password: <code>***</code>, assign role nx-deployment.</li> <li>For LDAP/OIDC \u2192 <code>Security \u2192 Realms</code> and enable provider, then configure under <code>Administration \u2192 Capabilities</code>.</li> </ul>"},{"location":"tools/nexus/#8-upgrading-nexus","title":"8  Upgrading Nexus","text":"<pre><code>docker pull sonatype/nexus3:latest\ndocker stop nexus &amp;&amp; docker rm nexus\ndocker run -d --name nexus -p 8081:8081 -p 5000:5000 \\\n  -v nexus-data:/nexus-data \\\n  sonatype/nexus3:latest\n</code></pre>"},{"location":"tools/nexus/#9-backup-restore","title":"9  Backup &amp; restore","text":"<pre><code># Backup blob + database\ndocker run --rm --volumes-from nexus -v $(pwd):/backup busybox \\\n  tar czf /backup/nexus-backup-$(date +%F).tgz /nexus-data\n\n# Restore\ndocker stop nexus &amp;&amp; docker rm nexus\ndocker volume rm nexus-data\ndocker volume create nexus-data\ntar xzf nexus-backup-2025-05-06.tgz -C $(docker volume inspect nexus-data -f '{{ .Mountpoint }}')\ndocker run -d --name nexus -p 8081:8081 -p 5000:5000 \\\n  -v nexus-data:/nexus-data \\\n  sonatype/nexus3:latest\n</code></pre>"},{"location":"tools/nexus/#10-references-next-steps","title":"10  References &amp; next steps","text":"<ul> <li>Official docs: https://help.sonatype.com/repomanager3</li> <li>REST API: <code>http://localhost:8081/service/rest/swagger.json</code></li> <li>Consider Sonatype IQ for vulnerability scanning (paid).</li> </ul>"},{"location":"tools/sonarcloud/","title":"\ud83d\ude80 SonarCloud Integration \u2013 Quick Guide","text":"<p>Platform: SonarCloud (free SaaS edition) Date: July 2025 Sample repository: videogame\u2011platform (monorepo with Java 21 + SpringBoot3 microservices)</p>"},{"location":"tools/sonarcloud/#1-what-is-sonarsonarqube-sonarcloud","title":"1 What is Sonar(SonarQube / SonarCloud)?","text":"<p>Sonar is a Continuous Inspection platform that analyses source code to measure, track, and improve its quality. SonarCloud is SonarSource\u2019s fully managed SaaS offering:</p> <ul> <li>Scans every pull request automatically.</li> <li>Calculates key metrics and reports the result via GitHub Checks.</li> <li>Stores history and trends without any server maintenance.</li> </ul>"},{"location":"tools/sonarcloud/#2-what-does-sonar-detect","title":"2 What does Sonar detect?","text":"Category Description Examples Bugs Runtime errors that will cause failures in production NullPointer, incorrect API usage Vulnerabilities Exploitable security risks SQL Injection, Path Traversal CodeSmells Maintainability problems Long methods, high cyclomatic complexity SecurityHotspots Code areas that need manual review Insecure cryptography Duplications Copy\u2011pasted code increasing change cost Same block in multiple classes Coverage Percentage of lines covered by tests \u2014 Reliability / Maintainability ratings Letter grades\u00a0A\u2013E based on technical debt \u2014"},{"location":"tools/sonarcloud/#3-what-is-a-qualitygate-and-why-does-it-matter","title":"3 What is a QualityGate and why does it matter?","text":"<p>A Quality Gate is a set of mandatory thresholds applied to the latest analysis:</p> <ul> <li>It must pass before merging a pull request or deploying to production.  </li> <li>It evaluates only the new code (delta since the previous version) so legacy debt does not block you.  </li> <li>Default example (Sonar way):  </li> <li>Coverage \u2265 80%  </li> <li>0 new Bugs / 0 new Vulnerabilities  </li> <li>0% new Duplications</li> </ul> <p>\ud83d\udea6 If any threshold fails, the GitHub check turns red and the <code>QualityGate</code> job in CI blocks the pipeline. This ensures code quality never degrades with each commit.</p>"},{"location":"tools/sonarcloud/#4-getting-started-with-sonarcloud","title":"4 Getting started with SonarCloud","text":"<ol> <li>Sign in with your GitHub account at https://sonarcloud.io.  </li> <li>Create an Organization (one\u2011click) and grant access to the <code>videogame\u2011platform</code> repo.  </li> <li>Inside the org, choose Create project \u2192 Analyze new project, pick the repository, and confirm.  </li> <li>Copy the ProjectKey (e.g. <code>videogame-platform_game-service</code>).  </li> <li>Navigate to MyAccount \u2192 Security \u2192 Generate Token named <code>SONAR_TOKEN</code>.  </li> <li>In GitHub \u2192 Settings \u2192 Secrets and variables \u2192 Actions, add:  </li> </ol> Name Scope Value <code>SONAR_TOKEN</code> Repository <code>&lt;token&gt;</code> <code>SONAR_PROJECT_KEY</code> Repository <code>videogame-platform_game-service</code>"},{"location":"tools/sonarcloud/#5-github-actions-pipeline-build-and-pushyml","title":"5 GitHub Actions pipeline (<code>build-and-push.yml</code>)","text":"<pre><code>- name: \ud83d\udd0e SonarCloud Scan\n  uses: SonarSource/sonarcloud-github-action@v2\n  with:\n    projectBaseDir: services/${{ matrix.service }}\n    args: &gt;\n      -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}\n      -Dsonar.organization=your-org\n      -Dsonar.java.binaries=.\n      -Dsonar.coverage.exclusions=**/*Test.java,**/*IT.java\n  env:\n    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n\n- name: \u2705 Quality Gate\n  uses: SonarSource/sonarqube-quality-gate-action@v1\n  with:\n    scanMetadataReportFile: services/${{ matrix.service }}/.scannerwork/report-task.txt\n  env:\n    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n</code></pre> <ul> <li>This runs before the <code>build-and-push</code> job (push to registry+k3s deploy).  </li> <li>If the QualityGate fails, GitHub blocks the merge and the following job is skipped.</li> </ul>"},{"location":"tools/sonarcloud/#6-local-analysis-sonarlint-maven","title":"6 Local analysis (SonarLint &amp; Maven)","text":"<ul> <li>IntelliJ IDEA \u2192 Install SonarLint, bind it to SonarCloud, and enable \u201cAutomatically sync issues\u201d.  </li> <li>CLI (requires JDK 17+):</li> </ul> <pre><code>mvn --batch-mode verify sonar:sonar   -Dsonar.organization=your-org   -Dsonar.projectKey=$SONAR_PROJECT_KEY   -Dsonar.login=$SONAR_TOKEN   -Dsonar.host.url=https://sonarcloud.io\n</code></pre> <p>A direct link to the dashboard is printed at the end.</p>"},{"location":"tools/sonarcloud/#7-references-next-steps","title":"7 References &amp; next steps","text":"<ul> <li>Official docs: https://docs.sonarcloud.io/ </li> <li>Quality Gates: https://docs.sonarcloud.io/improve/quality-gates/ </li> <li>GitHub Marketplace: <code>sonarcloud-github-action</code> </li> <li>Maven plugin: <code>org.sonarsource.scanner.maven:sonar-maven-plugin:3.12.0.5941</code> </li> <li>OWASP Top 10 2021 for background on detected vulnerabilities.</li> </ul> <p>\ud83d\udca1 DevSecOps tip Combine SonarCloud with dependency scanning (OWASP Dep Check or Snyk) and container analysis (Trivy) for end\u2011to\u2011end security coverage in your pipeline.</p>"}]}